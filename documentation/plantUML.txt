@startuml
api .left.|>game_API
connection_control -left-> api
game_control -left-> api
game_control -up->connection_control
game_control -right->game_make


note top of game_make 
<size:10>Конструктор создает на машине игрока доску
<size:10>с фигурами. Но сама игра происходит на сервере в файле 
<size:10> game_name.txt в папке /game/game_name.
<size:10>Игра на изображается в виде простой записной книги
<size:10>где по очереди записываются ходы черных и белых. 
end note


note top of connection_control 
<size:10>Конструктор заполняет(сначала создает) файл,
<size:10>table_hash_game.txt,в котором хранится хеш  
<size:10> и соответствующие ему номер игры.
<size:10>По нему происходит валидация пользователей
<size:10>и поиск номера игры.
end note


class game_API <<interface>>{

+start_game(state, key)
+make_step(figure, point_A, point_B)
+status_game()
+give_up()

}

class api {
+$_COOKIE["id"];
+$_COOKIE["hash"];

+start_game(state, key){}
+make_step(figure, point_A, point_B){}
+status_game(){}
+give_up(){}
}

class connection_control {

+control_start(status,key){}

-get_id()
-get_hash(key)
+create_game(key_phrase)
+control_end(name)
+control_valid_key_game(hash, need_game_number)
+add_gamer(key)
}


class game_control {
+go_step(figure, start, finish)
+view_status_game(key_phrase)

-control_user(hash , id)
-control_step(step, board)
-control_exist_figure(step, board) 
-control_through_figure(step, board)  
-control_final_point(step, $board) 
-parser_step(parse_string)

}

class game_make {
+construct_board()
+write_step(game, step)
+read_step(game)
}
@enduml